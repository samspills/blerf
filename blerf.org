#+hugo_base_dir: ./
#+hugo_section: words

#+seq_todo: TODO DRAFT DONE

#+property: header-args :eval never-export
#+options: creator:t

#+STARTUP: indent
#+STARTUP: logdone

#+AUTHOR: Sam Pillsworth

* General
** DONE I blerfed it :nonsense:
CLOSED: [2023-01-23 Mon 23:23]
:PROPERTIES:
:EXPORT_FILE_NAME: blerfed-it
:END:
What's up nerds[fn:1], I'm back. Trying to figure this whole situation out.
To figure out:
- [X] is this post getting generated?
- [X] how to make a footnote?
- [X] What do these checkboxes look like?
  - they look totally reasonable
- [X] Did I figure out syntax highlighting?
  + hot damn I did! Good job Past Sam!
- [X] different code styling?
- [X] line numbers??

I am looking at this on a small screen and it looks not great. I think I would like to experiment
with different themes that are better layouts on a small screen.

#+begin_src scala
// this is just some sample code to check highlighting
def blerf(name: String): Unit = println(s"Hey, ${name}, did you know that Sam blerfed it?")
#+end_src

*** To remember in the future
- If the netlify preview build fails but everything works locally, check the hugo version
- not all chromastyles are available it seems?
- the leading slashes for the logo paths are important
** DONE References :reference:
CLOSED: [2024-09-04 Wed 19:53]
:PROPERTIES:
:EXPORT_FILE_NAME: references
:END:
This is just a collection of links for myself. Usually articles I've referenced
or written about elsewhere and I want to keep some kind of track of them. For
now it's just a big list by year of access, but maybe I will better categorize
them some time in the future.
*** 2024
- https://www.geoffreylitt.com/2024/08/25/your-pie-doesnt-need-be-original
- https://www.ursulakleguin.com/a-rant-about-technology
- https://citiesandmemory.com/obsolete-sounds/

** TODO Mermaid diagrams on GitHub
While working on a sequence diagram for a particular flow I lost a lot of time
trying to get a mermaid sequence diagram to not look chaotic, to not be so tiny
on my small laptop, and to have cute colours. I'm saving this for future
reference.

#+begin_src mermaid

#+end_src

*** Notes about this config, in no particular order
- I couldn't get ~background~ to work on GitHub to set a specific colour for the display window
  - This is why I had to set the font colour to a midtone grey, to try to support both a light and dark background
- the ~<br/><br/>~ adds some visual space, so that a request and it's response are clustered together compared to distinct requests
- the ~par~ action text is not readable on the dark background, what font colour do I need to change for that one?
- changing ~fontSize~ at the top level worked, but I couldn't get any of the sequence specific font configs to work
* Emacs
** DRAFT Blerfs with ox-hugo
    This is a draft about writing using ox-hugo.
* Scala :scala:
** DONE Refs and Streams 1: Scheduling Updates :cats_effect:fs2:rough_thoughts:
CLOSED: [2023-02-01 Wed 20:09]
:PROPERTIES:
:EXPORT_FILE_NAME: refs-and-streams-1
:END:

The past month at ~$work~ I've been working on a fun little problem, and I decided to minimize
it down as a future example for myself. This is part one of two parts.

*** The Problem
We have some data, rows of recommendations. The data is stored on disk, and we want to write an API
that will return rows based on some query. The data, for now, is small enough that it can be read
into memory when we start the server. A different process will update the data on disk however, and
we need that update to propagate to the server without disrupting running requests. The update is
the piece I've been working on.
*** The Code
I took this as an opportunity to build my understanding of [[https://typelevel.org/cats-effect/docs/std/ref][Cats Effect ~Ref~]], since it "provides
safe concurrent access and modification of its content." I also wanted to use an
[[https://fs2.io/#/][fs2]] ~Stream~ to handle the scheduling task (mostly because I know the fs2
stream API reasonably well and I could see how to do it. I'm not sure if there is a better way to do
that piece.).

To start I defined a "simpler" version of my problem:
- suppose I have a single ~Ref~, in IO, with an integer value
- I want to print the value every second
- I want to add 1 to the value every 3 seconds

The implementation[fn:3] for this reduced problem looks like so:
#+begin_src scala
//> using lib "co.fs2::fs2-core:3.4.0"
//> using lib "org.typelevel::cats-effect:3.4.4"

import fs2.Stream
import cats.effect.IO
import cats.effect.IOApp
import scala.concurrent.duration._
import cats.effect.kernel.Ref

object Scheduled extends IOApp.Simple {
  val theRefThing: IO[Ref[IO, Int]] = Ref[IO].of(1)

  def scheduledUpdate(ref: Ref[IO, Int]): Stream[IO, Unit] = {
    val prog = ref
      .updateAndGet(int => int + 1)
      .flatMap(int => IO.println(s"updated the ref to $int"))
    Stream.repeatEval(prog).metered(3.seconds)
  }

  def printRefThing(ref: Ref[IO, Int]): Stream[IO, Unit] = {
    val prog = ref.get
      .flatMap(int => IO.println(s"the current ref value is ${int}"))
    Stream.repeatEval(prog).metered(1.second)
  }

  def run: IO[Unit] = theRefThing.flatMap(ref =>
    printRefThing(ref)
      .concurrently(scheduledUpdate(ref))
      .interruptAfter(10.seconds)
      .compile
      .drain
  )
}
#+end_src

The ~scheduledUpdate~ and ~printRefThing~ methods both take in the ref as an argument. The
scheduling (printing every 1 second, or updating every 3 seconds) is handled by metering the
streams.

The entire experiment is orchestrated together in the ~run~ method, by creating ~theRefThing~
*once*, and passing that same value to both methods. Those methods are run concurrently and
interrupted after 10 seconds.

I emphasize *once* because in the moment (and in the haze of the holidays[fn:4]) I struggled here.
If I passed that initial ~IO~ around directly, then both streams would create a ~Ref~ each time
their respective programs ran. Both methods needs to be using the same ~Ref~ for any of this to
work.

The next step, which I'll write up separately, expands this reduced problem to include the API piece
(using [[https://http4s.org/][http4s]]).
** DONE Refs and Streams 2: Updating with an Endpoint :cats_effect:fs2:http4s:rough_thoughts:
CLOSED: [2023-02-09 Thu 11:05]
:PROPERTIES:
:EXPORT_FILE_NAME: refs-and-streams-2
:END:

Oh, hello. Lets continue with our [[https://www.blerf.ca/words/refs-and-streams-1/][ref and stream experiment]] by writing and serving a minimal API
with [[https://http4s.org/][http4s]].

*** The Problem, A Recap
From the first post:
#+begin_quote
We have some data, rows of recommendations. The data is stored on disk, and we want to write an API
that will return rows based on some query. The data, for now, is small enough that it can be read
into memory when we start the server. A different process will update the data on disk however, and
we need that update to propagate to the server without disrupting running requests. The update is
the piece I’ve been working on.
#+end_quote

I'm continuing from last time by focusing now on the API:
- how to use the ~Ref~ to construct a response?
- how to update the ~Ref~ via a request?
- how to link the http4s ~Server~ with the scheduled updates?

*** The Pieces
The method to update the ~Ref~ needed a few changes. The ~prog~ to do the actual updating is good;
however instead of running mulitple streams like in the previous example, we'll be using multiple
resources. So now I've decided to compile the stream to a resource and return a ~Resource[IO,
Unit]~.

#+begin_src scala
def scheduledUpdater(ref: Ref[IO, Int]): Resource[IO, Unit] = {
  val prog = ref
    .updateAndGet(i => i + 1)
    .flatMap(i => IO.println(s"scheduled update: added 1, ref value is now $i"))
  Stream.repeatEval(prog).metered(1.minute).compile.resource.drain
}
#+end_src

Instead of just printing the ~Ref~ value on a schedule, I wanted to make a curl request for the
current value. I also wanted to be able to set the value of the ~Ref~ arbitrarily via a request as
well. For that I wrote a 2-endpoint service:

#+begin_src scala
def refService(ref: Ref[IO, Int]) = HttpRoutes.of[IO] {
  case GET -> Root / "ref" =>
    for {
      i    <- ref.get
      resp <- Ok(s"Current ref value is: $i")
    } yield resp
  case PUT -> Root / "ref" / IntVar(value) =>
    for {
      _    <- ref.set(value)
      resp <- Ok(s"Updated the ref value to: $value")
    } yield resp
}
#+end_src

Finally, similar to last time, the tricky part was figuring out how to stitch the scheduled update
together with something else (in this case the ~Server~ resource). The real MVP here is the call to
~Resource.both~, which "allocates two resources concurrently, and combines their results in a
tuple."[fn:5] Then I can call ~.useForever~ on the tuple to have a forever-running server and
updater.

#+begin_src scala
def run(args: List[String]): IO[ExitCode] = {
  val serverAndUpdater: Resource[IO, (Server, Unit)] = for {
    ref <- Resource.eval(Ref[IO].of(1))
    httpApp = Router("/" -> refService(ref)).orNotFound
    updater = scheduledUpdater(ref)
    server = EmberServerBuilder
      .default[IO]
      .withHost(ipv4"0.0.0.0")
      .withPort(port"8080")
      .withHttpApp(httpApp)
      .build
    serverAndUpdater <- Resource.both(server, updater)
  } yield serverAndUpdater

  serverAndUpdater.useForever.as(ExitCode.Success)
}
#+end_src

*** All The Code Together
All the pieces come together like so:[fn:2]
#+begin_src scala
//> using lib "co.fs2::fs2-core:3.4.0"
//> using lib "org.typelevel::cats-effect:3.4.4"
//
//> using lib "org.http4s::http4s-core:0.23.17"
//> using lib "org.http4s::http4s-dsl:0.23.17"
//> using lib "org.http4s::http4s-ember-server:0.23.17"
//> using lib "org.http4s::http4s-server:0.23.17"

import fs2.Stream
import cats.effect.IO
import cats.effect.IOApp
import scala.concurrent.duration._
import cats.effect.kernel.Ref

import org.http4s.HttpRoutes
import org.http4s.dsl.io._
import org.http4s.implicits._
import org.http4s.server.Router
import org.http4s.ember.server.EmberServerBuilder

import com.comcast.ip4s._
import cats.effect.ExitCode
import cats.effect.kernel.Resource
import org.http4s.server.Server

object ScheduledEndpoint extends IOApp {

  def refService(ref: Ref[IO, Int]) = HttpRoutes.of[IO] {
    case GET -> Root / "ref" =>
      for {
        i    <- ref.get
        resp <- Ok(s"Current ref value is: $i")
      } yield resp
    case PUT -> Root / "ref" / IntVar(value) =>
      for {
        _    <- ref.set(value)
        resp <- Ok(s"Updated the ref value to: $value")
      } yield resp
  }

  def scheduledUpdater(ref: Ref[IO, Int]): Resource[IO, Unit] = {
    val prog = ref
      .updateAndGet(i => i + 1)
      .flatMap(i => IO.println(s"scheduled update: added 1, ref value is now $i"))
    Stream.repeatEval(prog).metered(1.minute).compile.resource.drain
  }

  def run(args: List[String]): IO[ExitCode] = {
    val serverAndUpdater: Resource[IO, (Server, Unit)] = for {
      ref <- Resource.eval(Ref[IO].of(1))
      httpApp = Router("/" -> refService(ref)).orNotFound
      updater = scheduledUpdater(ref)
      server = EmberServerBuilder
        .default[IO]
        .withHost(ipv4"0.0.0.0")
        .withPort(port"8080")
        .withHttpApp(httpApp)
        .build
      serverAndUpdater <- Resource.both(server, updater)
    } yield serverAndUpdater

    serverAndUpdater.useForever.as(ExitCode.Success)
  }

}
#+end_src

And with that running, I can curl for the current value of the ref:
#+begin_src shell
❯ curl 0.0.0.0:8080/ref
Current ref value is: 1%
#+end_src

Letting it sit and run for a while, I can see the ref getting updated:
#+begin_src shell
scheduled update: added 1, ref value is now 2
scheduled update: added 1, ref value is now 3
#+end_src

I can get the updated ref value, and ~PUT~ a brand new value too:
#+begin_src shell
❯ curl 0.0.0.0:8080/ref
Current ref value is: 3%

❯ curl -X PUT 0.0.0.0:8080/ref/42
Updated the ref value to: 42%

❯ curl 0.0.0.0:8080/ref
Current ref value is: 42%
#+end_src

Neat! At ~$work~, the update function was a lot more complicated because it was a streaming request to read from a
GCS bucket (and a lot of error handling to go with it), and the lookup was more complicated because
we have more than just an integer. BUT the bones of this solution are what I've shipped and it's
going pretty well (touch wood, throw some salt over your left shoulder, etc. etc.).

** DONE Batch 'em up, Move 'em on :fs2:
CLOSED: [2024-08-28 Wed 14:22]
:PROPERTIES:
:EXPORT_FILE_NAME: batch-it
:END:

I really like working with fs2. I like saving little code examples for myself. I
want to use the blog more and get out of the habit of reaching for gists. Also I need somewhere to put my intrusive-thought song parodies[fn:6].

*** The Problem
We have a stream of "things". We want to batch those things up, and do something
to each batch. We need to count which batch we're on. Oh and also, if the stream
of "things" is empty, we want to fallback to some other operation.
*** The Code
#+begin_src scala
import cats.effect.IO
import fs2.Stream

def getAndProcessThings(batchSize: Int): IO[Unit] = {
  val things: Stream[IO, String] = Stream("a", "b", "c", "d", "e", "f", "g", "h", "i", "j").covary[IO]
  val fallback: Stream[IO, Unit] = Stream.eval(IO.println("falling back"))

  things
    .chunkN(batchSize) // split stream into chunks of batchSize
    .zipWithIndex // zip the chunks together with an index
    .evalMap { case (chunk, batchNumber) =>
      IO.println(s"Processing batch $batchNumber: $chunk")
    }
    .ifEmpty(fallback)
    .compile
    .drain
}
#+end_src

If that function is run with a batch size of 3, we'll get the following output
#+begin_src shell
processing batch number 0; Chunk(a, b, c)
processing batch number 1; Chunk(d, e, f)
processing batch number 2; Chunk(g, h, i)
processing batch number 3; Chunk(j)
#+end_src

If ~things~ was instead set to a value of ~Stream.empty~, we'll instead see ~falling back~ printed.
* Footnotes

[fn:6] Rawhidddeeeee
[fn:5] Check out the [[https://typelevel.org/cats-effect/api/3.x/cats/effect/kernel/Resource.html][API docs]] (which I'm quoting) for more details

[fn:2] As before, this code is available as [[https://gist.github.com/samspills/5a59db10a7d1b7b349fafae14cf42c3a][a gist]]. You can run it directly using [[https://scala-cli.virtuslab.org/][scala-cli]].
[fn:4] I didn't touch a computer for three whole weeks and it was glorious. I think my brain must
have assumed I'd given up on tech and flushed my memory, because when I got back
to work I could barely ~println("Hello, world")~
[fn:3] This code sample is also available as [[https://gist.github.com/samspills/b1a3434e1bac21ac9c62004df2f25306][a gist]]. You can run it directly using [[https://scala-cli.virtuslab.org/][scala-cli]].
[fn:1] It's me. My past self is nerds.
